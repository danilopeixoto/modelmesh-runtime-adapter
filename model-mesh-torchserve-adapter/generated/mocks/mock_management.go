// Copyright 2022 IBM Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: internal/proto/torchserve/management_grpc.pb.go

// Package mock_torchserve is a generated GoMock package.
package mock_torchserve

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	torchserve "github.com/kserve/modelmesh-runtime-adapter/internal/proto/torchserve"
	grpc "google.golang.org/grpc"
)

// MockManagementAPIsServiceClient is a mock of ManagementAPIsServiceClient interface.
type MockManagementAPIsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockManagementAPIsServiceClientMockRecorder
}

// MockManagementAPIsServiceClientMockRecorder is the mock recorder for MockManagementAPIsServiceClient.
type MockManagementAPIsServiceClientMockRecorder struct {
	mock *MockManagementAPIsServiceClient
}

// NewMockManagementAPIsServiceClient creates a new mock instance.
func NewMockManagementAPIsServiceClient(ctrl *gomock.Controller) *MockManagementAPIsServiceClient {
	mock := &MockManagementAPIsServiceClient{ctrl: ctrl}
	mock.recorder = &MockManagementAPIsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagementAPIsServiceClient) EXPECT() *MockManagementAPIsServiceClientMockRecorder {
	return m.recorder
}

// DescribeModel mocks base method.
func (m *MockManagementAPIsServiceClient) DescribeModel(ctx context.Context, in *torchserve.DescribeModelRequest, opts ...grpc.CallOption) (*torchserve.ManagementResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeModel", varargs...)
	ret0, _ := ret[0].(*torchserve.ManagementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeModel indicates an expected call of DescribeModel.
func (mr *MockManagementAPIsServiceClientMockRecorder) DescribeModel(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeModel", reflect.TypeOf((*MockManagementAPIsServiceClient)(nil).DescribeModel), varargs...)
}

// ListModels mocks base method.
func (m *MockManagementAPIsServiceClient) ListModels(ctx context.Context, in *torchserve.ListModelsRequest, opts ...grpc.CallOption) (*torchserve.ManagementResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListModels", varargs...)
	ret0, _ := ret[0].(*torchserve.ManagementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModels indicates an expected call of ListModels.
func (mr *MockManagementAPIsServiceClientMockRecorder) ListModels(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModels", reflect.TypeOf((*MockManagementAPIsServiceClient)(nil).ListModels), varargs...)
}

// RegisterModel mocks base method.
func (m *MockManagementAPIsServiceClient) RegisterModel(ctx context.Context, in *torchserve.RegisterModelRequest, opts ...grpc.CallOption) (*torchserve.ManagementResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterModel", varargs...)
	ret0, _ := ret[0].(*torchserve.ManagementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterModel indicates an expected call of RegisterModel.
func (mr *MockManagementAPIsServiceClientMockRecorder) RegisterModel(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterModel", reflect.TypeOf((*MockManagementAPIsServiceClient)(nil).RegisterModel), varargs...)
}

// ScaleWorker mocks base method.
func (m *MockManagementAPIsServiceClient) ScaleWorker(ctx context.Context, in *torchserve.ScaleWorkerRequest, opts ...grpc.CallOption) (*torchserve.ManagementResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScaleWorker", varargs...)
	ret0, _ := ret[0].(*torchserve.ManagementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScaleWorker indicates an expected call of ScaleWorker.
func (mr *MockManagementAPIsServiceClientMockRecorder) ScaleWorker(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScaleWorker", reflect.TypeOf((*MockManagementAPIsServiceClient)(nil).ScaleWorker), varargs...)
}

// SetDefault mocks base method.
func (m *MockManagementAPIsServiceClient) SetDefault(ctx context.Context, in *torchserve.SetDefaultRequest, opts ...grpc.CallOption) (*torchserve.ManagementResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetDefault", varargs...)
	ret0, _ := ret[0].(*torchserve.ManagementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDefault indicates an expected call of SetDefault.
func (mr *MockManagementAPIsServiceClientMockRecorder) SetDefault(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefault", reflect.TypeOf((*MockManagementAPIsServiceClient)(nil).SetDefault), varargs...)
}

// UnregisterModel mocks base method.
func (m *MockManagementAPIsServiceClient) UnregisterModel(ctx context.Context, in *torchserve.UnregisterModelRequest, opts ...grpc.CallOption) (*torchserve.ManagementResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnregisterModel", varargs...)
	ret0, _ := ret[0].(*torchserve.ManagementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnregisterModel indicates an expected call of UnregisterModel.
func (mr *MockManagementAPIsServiceClientMockRecorder) UnregisterModel(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterModel", reflect.TypeOf((*MockManagementAPIsServiceClient)(nil).UnregisterModel), varargs...)
}

// MockManagementAPIsServiceServer is a mock of ManagementAPIsServiceServer interface.
type MockManagementAPIsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockManagementAPIsServiceServerMockRecorder
}

// MockManagementAPIsServiceServerMockRecorder is the mock recorder for MockManagementAPIsServiceServer.
type MockManagementAPIsServiceServerMockRecorder struct {
	mock *MockManagementAPIsServiceServer
}

// NewMockManagementAPIsServiceServer creates a new mock instance.
func NewMockManagementAPIsServiceServer(ctrl *gomock.Controller) *MockManagementAPIsServiceServer {
	mock := &MockManagementAPIsServiceServer{ctrl: ctrl}
	mock.recorder = &MockManagementAPIsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagementAPIsServiceServer) EXPECT() *MockManagementAPIsServiceServerMockRecorder {
	return m.recorder
}

// DescribeModel mocks base method.
func (m *MockManagementAPIsServiceServer) DescribeModel(arg0 context.Context, arg1 *torchserve.DescribeModelRequest) (*torchserve.ManagementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeModel", arg0, arg1)
	ret0, _ := ret[0].(*torchserve.ManagementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeModel indicates an expected call of DescribeModel.
func (mr *MockManagementAPIsServiceServerMockRecorder) DescribeModel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeModel", reflect.TypeOf((*MockManagementAPIsServiceServer)(nil).DescribeModel), arg0, arg1)
}

// ListModels mocks base method.
func (m *MockManagementAPIsServiceServer) ListModels(arg0 context.Context, arg1 *torchserve.ListModelsRequest) (*torchserve.ManagementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModels", arg0, arg1)
	ret0, _ := ret[0].(*torchserve.ManagementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModels indicates an expected call of ListModels.
func (mr *MockManagementAPIsServiceServerMockRecorder) ListModels(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModels", reflect.TypeOf((*MockManagementAPIsServiceServer)(nil).ListModels), arg0, arg1)
}

// RegisterModel mocks base method.
func (m *MockManagementAPIsServiceServer) RegisterModel(arg0 context.Context, arg1 *torchserve.RegisterModelRequest) (*torchserve.ManagementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterModel", arg0, arg1)
	ret0, _ := ret[0].(*torchserve.ManagementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterModel indicates an expected call of RegisterModel.
func (mr *MockManagementAPIsServiceServerMockRecorder) RegisterModel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterModel", reflect.TypeOf((*MockManagementAPIsServiceServer)(nil).RegisterModel), arg0, arg1)
}

// ScaleWorker mocks base method.
func (m *MockManagementAPIsServiceServer) ScaleWorker(arg0 context.Context, arg1 *torchserve.ScaleWorkerRequest) (*torchserve.ManagementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScaleWorker", arg0, arg1)
	ret0, _ := ret[0].(*torchserve.ManagementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScaleWorker indicates an expected call of ScaleWorker.
func (mr *MockManagementAPIsServiceServerMockRecorder) ScaleWorker(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScaleWorker", reflect.TypeOf((*MockManagementAPIsServiceServer)(nil).ScaleWorker), arg0, arg1)
}

// SetDefault mocks base method.
func (m *MockManagementAPIsServiceServer) SetDefault(arg0 context.Context, arg1 *torchserve.SetDefaultRequest) (*torchserve.ManagementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefault", arg0, arg1)
	ret0, _ := ret[0].(*torchserve.ManagementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDefault indicates an expected call of SetDefault.
func (mr *MockManagementAPIsServiceServerMockRecorder) SetDefault(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefault", reflect.TypeOf((*MockManagementAPIsServiceServer)(nil).SetDefault), arg0, arg1)
}

// UnregisterModel mocks base method.
func (m *MockManagementAPIsServiceServer) UnregisterModel(arg0 context.Context, arg1 *torchserve.UnregisterModelRequest) (*torchserve.ManagementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterModel", arg0, arg1)
	ret0, _ := ret[0].(*torchserve.ManagementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnregisterModel indicates an expected call of UnregisterModel.
func (mr *MockManagementAPIsServiceServerMockRecorder) UnregisterModel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterModel", reflect.TypeOf((*MockManagementAPIsServiceServer)(nil).UnregisterModel), arg0, arg1)
}

// mustEmbedUnimplementedManagementAPIsServiceServer mocks base method.
func (m *MockManagementAPIsServiceServer) mustEmbedUnimplementedManagementAPIsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedManagementAPIsServiceServer")
}

// mustEmbedUnimplementedManagementAPIsServiceServer indicates an expected call of mustEmbedUnimplementedManagementAPIsServiceServer.
func (mr *MockManagementAPIsServiceServerMockRecorder) mustEmbedUnimplementedManagementAPIsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedManagementAPIsServiceServer", reflect.TypeOf((*MockManagementAPIsServiceServer)(nil).mustEmbedUnimplementedManagementAPIsServiceServer))
}

// MockUnsafeManagementAPIsServiceServer is a mock of UnsafeManagementAPIsServiceServer interface.
type MockUnsafeManagementAPIsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeManagementAPIsServiceServerMockRecorder
}

// MockUnsafeManagementAPIsServiceServerMockRecorder is the mock recorder for MockUnsafeManagementAPIsServiceServer.
type MockUnsafeManagementAPIsServiceServerMockRecorder struct {
	mock *MockUnsafeManagementAPIsServiceServer
}

// NewMockUnsafeManagementAPIsServiceServer creates a new mock instance.
func NewMockUnsafeManagementAPIsServiceServer(ctrl *gomock.Controller) *MockUnsafeManagementAPIsServiceServer {
	mock := &MockUnsafeManagementAPIsServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeManagementAPIsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeManagementAPIsServiceServer) EXPECT() *MockUnsafeManagementAPIsServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedManagementAPIsServiceServer mocks base method.
func (m *MockUnsafeManagementAPIsServiceServer) mustEmbedUnimplementedManagementAPIsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedManagementAPIsServiceServer")
}

// mustEmbedUnimplementedManagementAPIsServiceServer indicates an expected call of mustEmbedUnimplementedManagementAPIsServiceServer.
func (mr *MockUnsafeManagementAPIsServiceServerMockRecorder) mustEmbedUnimplementedManagementAPIsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedManagementAPIsServiceServer", reflect.TypeOf((*MockUnsafeManagementAPIsServiceServer)(nil).mustEmbedUnimplementedManagementAPIsServiceServer))
}
